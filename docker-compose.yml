version: '3.8'

services:
  # Servicio principal de ASTRAI
  astrai-api:
    build: .
    container_name: astrai-api
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./datasets:/home/astrai/datasets
      - ./models:/home/astrai/models
      - ./logs:/home/astrai/logs
      - ./reports:/home/astrai/reports
    networks:
      - astrai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servidor de modelos (opcional, para modelos grandes)
  model-server:
    build: .
    container_name: astrai-model-server
    command: ["python", "-m", "src.deployment.model_server"]
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
      - MODEL_SERVER_PORT=8001
    volumes:
      - ./models:/home/astrai/models
      - ./logs:/home/astrai/logs
    networks:
      - astrai-network
    restart: unless-stopped
    depends_on:
      - astrai-api

  # Base de datos (opcional, para metadatos y resultados)
  postgres:
    image: postgres:15-alpine
    container_name: astrai-postgres
    environment:
      - POSTGRES_DB=astrai
      - POSTGRES_USER=astrai
      - POSTGRES_PASSWORD=astrai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - astrai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astrai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para caching (opcional)
  redis:
    image: redis:7-alpine
    container_name: astrai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - astrai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: astrai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    networks:
      - astrai-network
    depends_on:
      - astrai-api
    restart: unless-stopped

  # Monitoreo con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: astrai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - astrai-network
    restart: unless-stopped

  # Visualizaci√≥n con Grafana (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: astrai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - astrai-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  astrai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

